package com.inetpsa.eds.dao.model;

// Generated 16 aoï¿½t 2012 16:02:15 by Hibernate Tools 3.2.1.GA

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import com.inetpsa.eds.dao.I_FormData;
import com.inetpsa.eds.dao.I_ReconsultableFormData;

/**
 * EdsPrimaryCurent generated by hbm2java
 */
@XmlRootElement(name = "preliminary-current-consumption-form")
public class EdsPrimaryCurent implements java.io.Serializable, I_FormData, I_ReconsultableFormData {
    /**
     * String Variable to hold the value for Column PCEDS_ID of Table OPLQTPRC
     */
    private String pcedsId;
    /**
     * Variable to hold the value for Column PCEDS_EDS_ID of Table OPLQTPRC
     */
    private EdsEds edsEds;
    /**
     * String Variable to hold the value for Column PC_COMMENT of Table OPLQTPRC
     */
    private String pcComment;
    /**
     * String Variable to hold the value for Column PC_IMAGE of Table OPLQTPRC
     */
    private String pcImage;
    /**
     * Set Collection to hold the values for Table OPLQTSUY
     */
    private Set<EdsSupply> edsSupplies = new HashSet<EdsSupply>(0);

    /**
     * Default Constructor
     */
    public EdsPrimaryCurent() {
    }

    /**
     * Parameterized Constructor
     * 
     * @param pcedsId Eds Primary current Id
     * @param edsEds Eds details
     */
    public EdsPrimaryCurent(String pcedsId, EdsEds edsEds) {
        this.pcedsId = pcedsId;
        this.edsEds = edsEds;
    }

    /**
     * Parameterized Constructor
     * 
     * @param pcedsId Eds Primary current id
     * @param edsEds Eds details
     * @param pcComment Comment
     * @param pcImage Image
     * @param edsSupplies set of EdsSupply
     */
    public EdsPrimaryCurent(String pcedsId, EdsEds edsEds, String pcComment, String pcImage, Set<EdsSupply> edsSupplies) {
        this.pcedsId = pcedsId;
        this.edsEds = edsEds;
        this.pcComment = pcComment;
        this.pcImage = pcImage;
        this.edsSupplies = edsSupplies;
    }

    /**
     * Function to get pcedsId
     * 
     * @return the Value of pcedsId
     */
    @XmlTransient
    public String getPcedsId() {
        return this.pcedsId;
    }

    /**
     * Function to set pcedsId
     * 
     * @param pcedsId Eds primary current Id
     */
    public void setPcedsId(String pcedsId) {
        this.pcedsId = pcedsId;
    }

    /**
     * Function to get edsEds
     * 
     * @return the Value of edsEds
     */
    @XmlTransient
    public EdsEds getEdsEds() {
        return this.edsEds;
    }

    /**
     * Function to set edsEds
     * 
     * @param edsEds Eds details
     */
    public void setEdsEds(EdsEds edsEds) {
        this.edsEds = edsEds;
    }

    /**
     * Function to get pcComment
     * 
     * @return the Value of pcComment
     */
    @XmlElement(name = "comment")
    public String getPcComment() {
        return this.pcComment;
    }

    /**
     * Function to set pcComment
     * 
     * @param pcComment comment
     */
    public void setPcComment(String pcComment) {
        this.pcComment = pcComment;
    }

    /**
     * Function to get pcImage
     * 
     * @return the Value of pcImage
     */
    @XmlTransient
    public String getPcImage() {
        return this.pcImage;
    }

    /**
     * Function to set pcImage
     * 
     * @param pcImage Image
     */
    public void setPcImage(String pcImage) {
        this.pcImage = pcImage;
    }

    /**
     * Function to get edsSupplies
     * 
     * @return the Value of edsSupplies
     */
    @XmlTransient
    public Set<EdsSupply> getEdsSupplies() {
        return this.edsSupplies;
    }

    /**
     * Function to set edsSupplies
     * 
     * @param edsSupplies set of EdsSupply
     */
    public void setEdsSupplies(Set<EdsSupply> edsSupplies) {
        this.edsSupplies = edsSupplies;
    }

    /**
     * Function to get primarySupplies
     * 
     * @return the Value of primarySupplies
     */
    @XmlElementWrapper(name = "supplies")
    @XmlElement(name = "supply")
    // FOR XML EXPORT PURPOSE
    public Set<EdsPrimarySupply> getEdsPreliminarySupplies() {
        Set<EdsPrimarySupply> primarySupplies = new HashSet<EdsPrimarySupply>();
        for (EdsSupply supply : edsSupplies) {
            if (supply.getEdsPrimarySupply() != null) {
                primarySupplies.add(supply.getEdsPrimarySupply());
            }
        }
        return primarySupplies;
    }

    /**
     * DO NOTHING, FOR XML EXPORT PURPOSE
     * 
     * @param edsSupplies Set of Eds supply
     */
    public void setEdsPreliminarySupplies(Set<?> edsSupplies) {
        // DO NOTHING, FOR XML EXPORT PURPOSE
    }

    /**
     * Function to get all saved items
     * 
     * @return All saved items
     */
    public List<Object> getAllItemsToSave() {
        return Collections.singletonList((Object) this);
    }

    /**
     * Function to get EdsPrimaryCurent
     * 
     * @param eds Eds details
     * @param copiesMap Map of id and supply object
     * @return the Value of form data
     */
    public I_FormData getCopy(EdsEds eds, HashMap<String, Object> copiesMap) {
        EdsPrimaryCurent copy = new EdsPrimaryCurent(UUID.randomUUID().toString(), eds);
        copy.pcComment = pcComment;
        copy.pcImage = pcImage;
        for (EdsSupply source : edsSupplies) {

            if (!copiesMap.containsKey(source.getSedsId())) {
                copiesMap.put(source.getSedsId(), source.getCopy(eds, copiesMap));
            }
            EdsSupply supplyCopy = (EdsSupply) copiesMap.get(source.getSedsId());
            copy.edsSupplies.add(supplyCopy);
        }
        return copy;
    }

    /**
     * Function to get EdsPrimaryCurent
     * 
     * @param eds Eds details
     * @param copiesMap Map of Id and Eds supply object
     * @return the Value of EdsPrimaryCurent form data
     */
    public I_FormData getReconsultableCopy(EdsEds eds, HashMap<String, Object> copiesMap) {

        EdsPrimaryCurent copy = new EdsPrimaryCurent(UUID.randomUUID().toString(), eds);
        copy.pcComment = pcComment;
        copy.pcImage = pcImage;
        for (EdsSupply source : edsSupplies) {

            if (!copiesMap.containsKey(source.getSedsId())) {
                copiesMap.put(source.getSedsId(), source.getCopyForReconsult(eds, copiesMap));
            }
            EdsSupply supplyCopy = (EdsSupply) copiesMap.get(source.getSedsId());
            copy.edsSupplies.add(supplyCopy);
        }
        return copy;
    }
}
