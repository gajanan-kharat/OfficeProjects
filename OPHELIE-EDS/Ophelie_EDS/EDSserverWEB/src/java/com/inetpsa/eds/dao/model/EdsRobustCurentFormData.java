package com.inetpsa.eds.dao.model;

// Generated 22 aoï¿½t 2012 11:57:49 by Hibernate Tools 3.2.1.GA

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import com.inetpsa.eds.dao.I_FormData;
import com.inetpsa.eds.dao.I_ReconsultableFormData;

/**
 * EdsRobustCurentFormData generated by hbm2java
 */
@XmlRootElement(name = "robust-current-consumption-form")
public class EdsRobustCurentFormData implements java.io.Serializable, I_FormData, I_ReconsultableFormData {
    /**
     * String Variable to hold the value for Column RCEDS_ID of Table OPLQTRCD
     */
    private String rcedsId;
    /**
     * Variable to hold the value for Column RCEDS_EDS_ID of Table OPLQTRCD
     */
    private EdsEds edsEds;
    /**
     * String Variable to hold the value for Column RC_COMMENT of Table OPLQTRCD
     */
    private String rcComment;
    /**
     * String Variable to hold the value for Column RC_IMAGE of Table OPLQTRCD
     */
    private String rcImage;
    /**
     * Variable to hold value of selection
     */
    private Integer rcChoixMasse;
    /**
     * Set Collection to hold the values for Table OPLQTGRO
     */
    private Set<EdsGround> edsGrounds = new HashSet<EdsGround>(0);
    /**
     * Set Collection to hold the values for Table OPLQTSUY
     */
    private Set<EdsSupply> edsSupplies = new HashSet<EdsSupply>(0);
    /**
     * Constant to hold value of CHOIX_MASSE_ONE
     */
    public static final int CHOIX_MASSE_ONE = 0;
    /**
     * Constant to hold value of CHOIX_MASSE_SUM
     */
    public static final int CHOIX_MASSE_SUM = 1;
    /**
     * Constant to hold value of CHOIX_MASSE_AUTRE
     */
    public static final int CHOIX_MASSE_AUTRE = 2;
    /**
     * Constant to hold value Map of Selected index and question
     */
    public static final HashMap<Integer, String> CHOIX_MASSES = new HashMap<Integer, String>();

    /**
     * Default Constructor
     */
    public EdsRobustCurentFormData() {
    }

    /**
     * Parameterized Constructor
     * 
     * @param rcedsId Eds Robust Current Form Data Id
     * @param edsEds Eds details
     */
    public EdsRobustCurentFormData(String rcedsId, EdsEds edsEds) {
        this.rcedsId = rcedsId;
        this.edsEds = edsEds;
    }

    /**
     * Parameterized Constructor
     * 
     * @param rcedsId Eds Robust Cueent Form Data Id
     * @param edsEds Eds details
     * @param rcComment Eds Robust current comment
     * @param edsGrounds set of EdsGrounds
     * @param edsSupplies Set of Supplies
     */
    public EdsRobustCurentFormData(String rcedsId, EdsEds edsEds, String rcComment, String rcImage, Set edsGrounds, Set edsSupplies) {
        this.rcedsId = rcedsId;
        this.edsEds = edsEds;
        this.rcComment = rcComment;
        this.rcImage = rcImage;
        this.edsGrounds = edsGrounds;
        this.edsSupplies = edsSupplies;
    }

    static {

        CHOIX_MASSES.put(CHOIX_MASSE_ONE, "current-conso-tab-mass-rob-choose1");
        CHOIX_MASSES.put(CHOIX_MASSE_SUM, "current-conso-tab-mass-rob-choose2");
        CHOIX_MASSES.put(CHOIX_MASSE_AUTRE, "current-conso-tab-mass-rob-choose3");

    }

    /**
     * Function to get rcedsId
     * 
     * @return the Value of rcedsId
     */
    @XmlTransient
    public String getRcedsId() {
        return this.rcedsId;
    }

    /**
     * Function to set rcedsId
     * 
     * @param rcedsId Eds Robust Current Form Data Id
     */
    public void setRcedsId(String rcedsId) {
        this.rcedsId = rcedsId;
    }

    /**
     * Function to get edsEds
     * 
     * @return the Value of edsEds
     */
    @XmlTransient
    public EdsEds getEdsEds() {
        return this.edsEds;
    }

    /**
     * Function to set edsEds
     * 
     * @param edsEds Eds details
     */
    public void setEdsEds(EdsEds edsEds) {
        this.edsEds = edsEds;
    }

    /**
     * Function to get rcComment
     * 
     * @return the Value of rcComment
     */
    @XmlElement(name = "comment")
    public String getRcComment() {
        return this.rcComment;
    }

    /**
     * Function to set rcComment
     * 
     * @param rcComment Eds Robust Current comment
     */
    public void setRcComment(String rcComment) {
        this.rcComment = rcComment;
    }

    /**
     * Function to get rcImage
     * 
     * @return the Value of rcImage
     */
    @XmlElement(name = "image")
    public String getRcImage() {
        return this.rcImage;
    }

    /**
     * Function to set rcImage
     * 
     * @param rcComment Eds Robust Current rcImage
     */
    public void setRcImage(String rcImage) {
        this.rcImage = rcImage;
    }

    /**
     * Function to return selected question index
     * 
     * @return Selected question index
     */
    public Integer getRcChoixMasse() {
        return rcChoixMasse;
    }

    /**
     * Function to set index of selected question
     * 
     * @param rcChoixMasse Index of selected question
     */
    public void setRcChoixMasse(Integer rcChoixMasse) {
        this.rcChoixMasse = rcChoixMasse;
    }

    /**
     * Function to get edsGrounds
     * 
     * @return the Value of edsGrounds
     */
    @XmlElementWrapper(name = "grounds")
    @XmlElement(name = "ground")
    public Set<EdsGround> getEdsGrounds() {
        return this.edsGrounds;
    }

    /**
     * Function to set edsGrounds
     * 
     * @param edsGrounds Set of EdsGround
     */
    public void setEdsGrounds(Set edsGrounds) {
        this.edsGrounds = edsGrounds;
    }

    /**
     * Function to get edsSupplies
     * 
     * @return the Value of edsSupplies
     */
    @XmlTransient
    public Set<EdsSupply> getEdsSupplies() {
        return this.edsSupplies;
    }

    /**
     * Function to set edsSupplies
     * 
     * @param edsSupplies set of EdsSupply
     */
    public void setEdsSupplies(Set edsSupplies) {
        this.edsSupplies = edsSupplies;
    }

    /**
     * Function to get EdsRobustSupply
     * 
     * @return the Value of EdsRobustSupply
     */
    @XmlElementWrapper(name = "supplies")
    @XmlElement(name = "supply")
    // FOR XML EXPORT PURPOSE
    public Set<EdsRobustSupply> getEdsRobustSupplies() {
        Set<EdsRobustSupply> robustSupplies = new HashSet<EdsRobustSupply>();
        for (EdsSupply supply : edsSupplies) {
            if (supply.getEdsRobustSupply() != null) {
                robustSupplies.add(supply.getEdsRobustSupply());
            }
        }
        return robustSupplies;
    }

    /**
     * DO NOTHING, FOR XML EXPORT PURPOSE
     * 
     * @param edsSupplies
     */
    public void setEdsPreliminarySupplies(Set edsSupplies) {
        // DO NOTHING, FOR XML EXPORT PURPOSE
    }

    /**
     * Function to get EdsRobustCurentFormData
     * 
     * @param eds Eds details
     * @param copiesMap Map for Id and supply object
     * @return the Value of EdsRobustCurentFormData
     */
    public I_FormData getCopy(EdsEds eds, HashMap<String, Object> copiesMap) {
        EdsRobustCurentFormData copy = new EdsRobustCurentFormData(UUID.randomUUID().toString(), eds);
        copy.rcComment = rcComment;
        copy.rcImage = rcImage;
        copy.rcChoixMasse = rcChoixMasse;
        for (EdsGround source : edsGrounds) {
            if (!copiesMap.containsKey(source.getGedsId())) {
                copiesMap.put(source.getGedsId(), new EdsGround(source));
            }
            EdsGround groundCopy = (EdsGround) copiesMap.get(source.getGedsId());
            groundCopy.setEdsRobustCurentFormData(copy);
            copy.edsGrounds.add(groundCopy);
        }
        for (EdsSupply source : edsSupplies) {

            if (!copiesMap.containsKey(source.getSedsId())) {
                copiesMap.put(source.getSedsId(), source.getCopy(eds, copiesMap));
            }
            EdsSupply supplyCopy = (EdsSupply) copiesMap.get(source.getSedsId());
            copy.edsSupplies.add(supplyCopy);
        }
        return copy;
    }

    /**
     * Function returns list of all saved items
     * 
     * @return list of all saved items
     */
    public List<Object> getAllItemsToSave() {
        return Collections.singletonList((Object) this);
    }

    /**
     * Function to get EdsRobustCurentFormData
     * 
     * @param eds Eds details
     * @param copiesMap Map of Id and supply object
     * @return the Value of EdsRobustCurentFormData
     */
    public I_FormData getReconsultableCopy(EdsEds eds, HashMap<String, Object> copiesMap) {
        EdsRobustCurentFormData copy = new EdsRobustCurentFormData(UUID.randomUUID().toString(), eds);
        copy.rcComment = rcComment;
        copy.rcImage = rcImage;
        copy.rcChoixMasse = rcChoixMasse;
        for (EdsGround source : edsGrounds) {
            if (!copiesMap.containsKey(source.getGedsId())) {
                copiesMap.put(source.getGedsId(), new EdsGround(source));
            }
            EdsGround groundCopy = (EdsGround) copiesMap.get(source.getGedsId());
            groundCopy.setEdsRobustCurentFormData(copy);
            copy.edsGrounds.add(groundCopy);
        }
        for (EdsSupply source : edsSupplies) {

            if (!copiesMap.containsKey(source.getSedsId())) {
                copiesMap.put(source.getSedsId(), source.getCopyForReconsult(eds, copiesMap));
            }
            EdsSupply supplyCopy = (EdsSupply) copiesMap.get(source.getSedsId());
            copy.edsSupplies.add(supplyCopy);
        }
        return copy;
    }
}
