package com.inetpsa.eds.dao.model;

// Generated 29 oct. 2012 15:24:19 by Hibernate Tools 3.2.1.GA

import com.inetpsa.eds.dao.EDSdao;
import com.inetpsa.eds.dao.I_FormData;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 * EdsAttachmentFormData generated by hbm2java
 */
@XmlRootElement(name = "attachments-form")
public class EdsAttachmentFormData implements Serializable, I_FormData {
    /**
     * String Variable to hold the value for Column AFD_ID of Table OPLQTATD
     */
    private String afdId;
    /**
     * Variable to hold the value for Column AFD_EDS_ID of Table OPLQTATD
     */
    private EdsEds edsEds;
    /**
     * Set Collection to hold the values for Table OPLQTATT
     */
    private Set<EdsAttachment> edsAttachments = new HashSet<EdsAttachment>(0);

    /**
     * Default Constructor
     */
    public EdsAttachmentFormData() {
    }

    /**
     * Parameterized Constructor
     * 
     * @param afdId Attachment form data id
     * @param edsEds
     */
    public EdsAttachmentFormData(String afdId, EdsEds edsEds) {
        this.afdId = afdId;
        this.edsEds = edsEds;

        for (EdsWording wording : EDSdao.getInstance().getAllActiveWordingsByType(EdsWording.DEFAULT_LINKS)) {
            this.addAttachment(new EdsAttachment(UUID.randomUUID().toString(), this, wording.getWValue()));
        }
    }

    /**
     * Parameterized Constructor
     * 
     * @param afdId Attachment form data id
     * @param edsEds Eds details
     * @param edsAttachments
     */
    public EdsAttachmentFormData(String afdId, EdsEds edsEds, Set<EdsAttachment> edsAttachments) {
        this.afdId = afdId;
        this.edsEds = edsEds;
        this.edsAttachments = edsAttachments;
    }

    /**
     * Function to get afdId
     * 
     * @return Attachment form data Id
     */
    @XmlTransient
    public String getAfdId() {
        return this.afdId;
    }

    /**
     * Function to set afdId
     * 
     * @param afdId
     */
    public void setAfdId(String afdId) {
        this.afdId = afdId;
    }

    /**
     * Function to get edsEds
     * 
     * @return Eds details
     */
    @XmlTransient
    public EdsEds getEdsEds() {
        return this.edsEds;
    }

    /**
     * Function to set edsEds
     * 
     * @param edsEds
     */
    public void setEdsEds(EdsEds edsEds) {
        this.edsEds = edsEds;
    }

    /**
     * Function to get edsAttachments
     * 
     * @return Set of EDS attachment
     */
    @XmlElementWrapper(name = "attachments")
    @XmlElement(name = "attachment")
    public Set<EdsAttachment> getEdsAttachments() {
        return this.edsAttachments;
    }

    /**
     * Function to set edsAttachments
     * 
     * @param edsAttachments
     */
    public void setEdsAttachments(Set<EdsAttachment> edsAttachments) {
        this.edsAttachments = edsAttachments;
    }

    /**
     * Function to add attachment
     * 
     * @param attachment Eds attachment
     * @return Check if attachment is added
     */
    public final boolean addAttachment(EdsAttachment attachment) {
        return this.edsAttachments.add(attachment);
    }

    /**
     * Function to remove attachment
     * 
     * @param attachment
     */
    public void removeAttachment(EdsAttachment attachment) {
        this.edsAttachments.remove(attachment);
    }

    /**
     * Function to get Copy of EdsAttachmentFormData
     * 
     * @param eds Eds details
     * @param copiesMap Map of copies
     * @return Form data
     */
    public I_FormData getCopy(EdsEds eds, HashMap<String, Object> copiesMap) {
        EdsAttachmentFormData newFormData = new EdsAttachmentFormData(UUID.randomUUID().toString(), eds, new HashSet<EdsAttachment>());

        for (EdsAttachment attachment : edsAttachments) {
            newFormData.addAttachment(new EdsAttachment(attachment, newFormData));
        }

        return newFormData;
    }

    /**
     * This method saves all items
     * 
     * @return list
     */
    public List getAllItemsToSave() {
        return Collections.singletonList(this);
    }
}
