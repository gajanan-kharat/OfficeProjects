/**
 * ChsPin generated by hbm2java
 */
package com.inetpsa.eds.dao.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

@XmlType
public class EdsPinConnect implements Serializable {
    private long id;

    @Transient
    private EdsEds eds;
    private String cavity;
    private String pinType;
    private String message;

    private EdsSupply supply;
    private String wiredInterface;
    private String simpleProfile;
    private Set<EdsWIProperty> wiProperty;
    private List<EdsSPProperty> spProperty = new ArrayList<EdsSPProperty>();
    private List<EdsCPProperty> cpProperty = new ArrayList<EdsCPProperty>();
    private List<EdsCPProfile> cpProfile = new ArrayList<EdsCPProfile>();
    private String complexProfile;
    private String complexComment;
    private Double rMax;
    private Double ifImpedance;
    private String minSection;

    @Transient
    private boolean crossed;

    public EdsPinConnect() {
    }

    @XmlTransient
    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((cavity == null) ? 0 : cavity.hashCode());
        result = prime * result + ((eds == null) ? 0 : eds.hashCode());
        result = prime * result + ((message == null) ? 0 : message.hashCode());
        result = prime * result + ((pinType == null) ? 0 : pinType.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        EdsPinConnect other = (EdsPinConnect) obj;
        if (cavity == null) {
            if (other.cavity != null)
                return false;
        } else if (!cavity.equals(other.cavity))
            return false;
        if (eds == null) {
            if (other.eds != null)
                return false;
        } else if (!eds.equals(other.eds))
            return false;
        if (message == null) {
            if (other.message != null)
                return false;
        } else if (!message.equals(other.message))
            return false;
        if (pinType == null) {
            if (other.pinType != null)
                return false;
        } else if (!pinType.equals(other.pinType))
            return false;
        return true;
    }

    @XmlTransient
    public EdsEds getEds() {
        return eds;
    }

    public void setEds(EdsEds eds) {
        this.eds = eds;
    }

    @XmlElement(name = "cavity")
    public String getCavity() {
        return cavity;
    }

    public void setCavity(String cavity) {
        this.cavity = cavity;
    }

    @XmlElement(name = "pin-type")
    public String getPinType() {
        return pinType;
    }

    public void setPinType(String pinType) {
        this.pinType = pinType;
    }

    @XmlElement(name = "message")
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    @XmlElement(name = "supply")
    public EdsSupply getSupply() {
        return supply;
    }

    public void setSupply(EdsSupply supply) {
        this.supply = supply;
    }

    @XmlElement(name = "wired-interface")
    public String getWiredInterface() {
        return wiredInterface;
    }

    public void setWiredInterface(String wiredInterface) {
        this.wiredInterface = wiredInterface;
    }

    @XmlElement(name = "wi-properties")
    public Set<EdsWIProperty> getWiProperty() {
        return wiProperty;
    }

    public void setWiProperty(Set<EdsWIProperty> wiProperty) {
        this.wiProperty = wiProperty;
    }

    @XmlElement(name = "simple-profile")
    public String getSimpleProfile() {
        return simpleProfile;
    }

    public void setSimpleProfile(String simpleProfile) {
        this.simpleProfile = simpleProfile;
    }

    @XmlElement(name = "sp-properties")
    public List<EdsSPProperty> getSpProperty() {
        return spProperty;
    }

    public void setSpProperty(List<EdsSPProperty> spProperty) {
        this.spProperty = spProperty;
    }

    @XmlElement(name = "complex-profile")
    public String getComplexProfile() {
        return complexProfile;
    }

    public void setComplexProfile(String complexProfile) {
        this.complexProfile = complexProfile;
    }

    @XmlElement(name = "complex-comment")
    public String getComplexComment() {
        return complexComment;
    }

    public void setComplexComment(String complexComment) {
        this.complexComment = complexComment;
    }

    @XmlElement(name = "cp-properties")
    public List<EdsCPProperty> getCpProperty() {
        return cpProperty;
    }

    public void setCpProperty(List<EdsCPProperty> cpProperty) {
        this.cpProperty = cpProperty;
    }

    @XmlElement(name = "cp-profiles")
    public List<EdsCPProfile> getCpProfile() {
        return cpProfile;
    }

    public void setCpProfile(List<EdsCPProfile> cpProfile) {
        this.cpProfile = cpProfile;
    }

    @XmlElement(name = "rmax")
    public Double getrMax() {
        return rMax;
    }

    public void setrMax(Double rMax) {
        this.rMax = rMax;
    }

    @XmlElement(name = "min-section")
    public String getMinSection() {
        return minSection;
    }

    public void setMinSection(String minSection) {
        this.minSection = minSection;
    }

    @XmlElement(name = "crossed")
    public boolean isCrossed() {
        return crossed;
    }

    public void setCrossed(boolean crossed) {
        this.crossed = crossed;
    }

    @XmlElement(name = "if-impedance")
    public Double getIfImpedance() {
        return ifImpedance;
    }

    public void setIfImpedance(Double ifImpedance) {
        this.ifImpedance = ifImpedance;
    }

    public EdsPinConnect duplicate(EdsEds eds) {
        EdsPinConnect clone = new EdsPinConnect();
        clone.setCavity(cavity);
        clone.setComplexComment(complexComment);
        clone.setComplexProfile(complexProfile);
        clone.setCrossed(crossed);
        clone.setEds(eds);
        clone.setIfImpedance(ifImpedance);
        clone.setMessage(message);
        clone.setMinSection(minSection);
        clone.setPinType(pinType);
        clone.setrMax(rMax);
        clone.setSimpleProfile(simpleProfile);
        clone.setWiredInterface(wiredInterface);

        List<EdsCPProfile> cpProfileClone = new ArrayList<EdsCPProfile>();
        for (EdsCPProfile item : this.getCpProfile()) {
            if (item != null) {
                cpProfileClone.add(item.duplicate(clone));
            }
        }
        clone.setCpProfile(cpProfileClone);

        List<EdsCPProperty> cpPropertyClone = new ArrayList<EdsCPProperty>();
        for (EdsCPProperty item : this.getCpProperty()) {
            if (item != null) {
                cpPropertyClone.add(item.duplicate(clone));
            }
        }
        clone.setCpProperty(cpPropertyClone);

        List<EdsSPProperty> spPropertyClone = new ArrayList<EdsSPProperty>();
        for (EdsSPProperty item : this.getSpProperty()) {
            if (item != null) {
                spPropertyClone.add(item.duplicate(clone));
            }
        }
        clone.setSpProperty(spPropertyClone);

        clone.setSupply(supply);

        Set<EdsWIProperty> wiPropertyClone = new HashSet<EdsWIProperty>();
        for (EdsWIProperty item : this.getWiProperty()) {
            if (item != null) {
                wiPropertyClone.add(item.duplicate(clone));
            }
        }
        clone.setWiProperty(wiPropertyClone);
        return clone;

    }

}
