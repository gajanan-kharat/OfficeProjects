package com.inetpsa.eds.dao.model;

// Generated 16 oct. 2012 11:37:16 by Hibernate Tools 3.2.1.GA

import com.inetpsa.eds.dao.I_FormData;
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 * EdsCseFormData generated by hbm2java
 */
@XmlRootElement(name = "cse-form")
public class EdsCseFormData implements Serializable, I_FormData {
    /**
     * String Variable to hold the value for Column CSE_ID of Table OPLQTCSD
     */
    private String cseId;
    /**
     * Variable to hold the value for Column CSE_EDS_ID of Table OPLQTCSD
     */
    private EdsEds edsEds;
    /**
     * Set Collection to hold the values for Table OPLQTCSL
     */
    private Set<EdsCseLine> edsCseLines = new HashSet<EdsCseLine>(0);

    /**
     * Default Constructor
     */
    public EdsCseFormData() {
    }

    /**
     * Parameterized Constructor
     * 
     * @param cseId Id
     * @param edsEds EdsEds
     */
    public EdsCseFormData(String cseId, EdsEds edsEds) {
        this.cseId = cseId;
        this.edsEds = edsEds;
        this.edsCseLines.add(new EdsCseLine(UUID.randomUUID().toString(), this, 1, "I_veille", null, null, "A", null));
        this.edsCseLines.add(new EdsCseLine(UUID.randomUUID().toString(), this, 2, "I_nom Stab", null, null, "A", null));
    }

    /**
     * Parameterized Constructor
     * 
     * @param cseId Id
     * @param edsEds EdsEds
     * @param edsCseLines set of EdsCseLine
     */
    public EdsCseFormData(String cseId, EdsEds edsEds, Set<EdsCseLine> edsCseLines) {
        this.cseId = cseId;
        this.edsEds = edsEds;
        this.edsCseLines = edsCseLines;
    }

    /**
     * Function to get cseId
     * 
     * @return Id
     */
    @XmlTransient
    public String getCseId() {
        return this.cseId;
    }

    /**
     * Function to set cseId
     * 
     * @param cseId ID
     */
    public void setCseId(String cseId) {
        this.cseId = cseId;
    }

    /**
     * Function to get edsEds
     * 
     * @return EdsEds
     */
    @XmlTransient
    public EdsEds getEdsEds() {
        return this.edsEds;
    }

    /**
     * Function to set edsEds
     * 
     * @param edsEds EdsEds
     */
    public void setEdsEds(EdsEds edsEds) {
        this.edsEds = edsEds;
    }

    /**
     * Function to get edsCseLines
     * 
     * @return Set of EdsCseLine
     */
    @XmlElementWrapper(name = "cse-lines")
    @XmlElement(name = "cse-line")
    public Set<EdsCseLine> getEdsCseLines() {
        return this.edsCseLines;
    }

    /**
     * Function to set edsCseLines
     * 
     * @param edsCseLines set of EdsCseLine
     */
    public void setEdsCseLines(Set<EdsCseLine> edsCseLines) {
        this.edsCseLines = edsCseLines;
    }

    /**
     * Function to add Cse line
     * 
     * @param line EdsCseLine
     */
    public void addEdsCseLine(EdsCseLine line) {
        this.edsCseLines.add(line);
    }

    /**
     * Function to add Cse lines
     * 
     * @param lines Collection of EdsCseLine
     */
    public void addEdsCseLines(Collection<EdsCseLine> lines) {
        this.edsCseLines.addAll(lines);
    }

    /**
     * Function to remove Cse line
     * 
     * @param line EdsCseLine to remove
     */
    public void removeEdsCseLine(EdsCseLine line) {
        this.edsCseLines.remove(line);
    }

    /**
     * Function to remove Cse lines
     * 
     * @param lines Collection of EdsCseLine to remove
     */
    public void removeEdsCseLines(Collection<EdsCseLine> lines) {
        this.edsCseLines.removeAll(lines);
    }

    /**
     * Function to get the Copy EdsCseFormData
     * 
     * @param eds Eds details
     * @param copiesMap Map of Id and EdsCseLine
     * @return EdsCseFormData
     */
    public I_FormData getCopy(EdsEds eds, HashMap<String, Object> copiesMap) {
        EdsCseFormData newCseFormData = new EdsCseFormData(UUID.randomUUID().toString(), eds);

        for (EdsCseLine line : edsCseLines) {
            newCseFormData.getEdsCseLines().add(new EdsCseLine(line, newCseFormData));
        }

        return newCseFormData;
    }

    /**
     * Function to get all saved items
     * 
     * @return All saved items
     */
    public List getAllItemsToSave() {
        return Collections.singletonList(this);
    }
}
